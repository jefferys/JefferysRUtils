% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stringUtils.R
\name{regexprMatches}
\alias{regexprMatches}
\title{Extract matched substrings}
\usage{
regexprMatches(matchResults, matchText, use.na = FALSE)
}
\arguments{
\item{matchResults}{The results of a match performed using
\code{\link[base]{regexpr}(regExp, matchText, perl= TRUE)} where
\code{regExp} has capture groups or named capture groups, like
\code{([^:]*)} or \code{(?<beforeColon>[^:]*)}. Will not work with
\code{perl= FALSE}.}

\item{matchText}{The text originally matched against, a vector of strings.}

\item{use.na}{By default returns empty strings for all capture groups if the
regExp fails to match. That can not be distinguished from a match with all
capture groups matching nothing, e.g. \code{(?<num>\\d*)}. Setting this
\code{TRUE} causes a failing match to return all NA values instead.}
}
\value{
A matrix with one column for each capture group (with matching
column name for named capture groups) and one row for each string in the
text vector matched to. The value of each cell is the text matched by the
named capture group. If any capture group does not match, all returned
strings are empty for that text vector element (row), or \code{NA} if
\code{use.na= TRUE}
}
\description{
You probably want \code{\link{regexprCapture}} as it is likely you are trying
to use a regular expression with capture groups. This function parses an
already generated match result; it is used by regexprCapture.
}
\details{
Extracts the substrings matched by capture groups from a provided
match result, i.e from output from \code{\link[base]{regexpr}}, with \code{perl=
TRUE}). Will return a matrix of strings with one column for each
capture group and one row for each string in the vector matched against. By
default will return empty strings if match fails, but can be set to return
NAs if desired. Supports named capture groups, matrix columns will be named
as appropriate.

This is intended for use with \code{\link[base]{regexpr}} to parse a string
and extract substrings via capture groups, similar to how
\code{\link[base]{regmatches}} is used. If only one string is matched
against, then returned matrix will have one row only.

Note that regExp with multiple capture groups will need to use greedy and
non-greedy matching carefully to avoid the capture groups interfering with
each other.
}
\examples{
regExp <- "(?<key>.+?)\\\\s*=\\\\s*(?<value>.+)"
data <- c('name = Stuart R. Jefferys', 'email=srj@unc.edu')
matchResults <- regexpr(regExp, data, perl= TRUE)
regexprMatches(matchResults, data)
#=>      key     value
#=> [1,] "name"  "Stuart R. Jefferys"
#=> [2,] "email" "srj@unc.edu"

}
\seealso{
\code{\link{regexprCapture}} \code{\link{regex}}
}
