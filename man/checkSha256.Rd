% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getData.R
\name{checkSha256}
\alias{checkSha256}
\title{Validate files by sha256 checksum hashing}
\usage{
checkSha256(checksums = NULL, files = NULL, error = NA, ext = ".sha256")
}
\arguments{
\item{checksums}{A vector or list of expected checksums. If named, they will
be treated as a dictionary of hash values. If unnamed, file
names must be provided in parallel in \code{files}. This is optional when note
files identified by \code{ext} are being used to store checksum values. It is an
error if only some checksums have names.}

\item{files}{The files to check as a string vector. If \code{checksums} are not
provided, note files containing the checksum will looked for based on
\code{ext}. If \code{checksums} are unnamed, \code{files} must match in order and length.
When \code{checksums} are named, \code{files} is optional and will default to the
checksum names.}

\item{error}{Boolean value. \code{NA} or \code{FALSE} specifies the result to return
when files are missing (eitherr files to be validated or expected note
files). Settting this \code{TRUE} causes an error to be thrown when a file is
not found, halting checking.}

\item{ext}{If only files are specified and checksums are not, checksums are
expected to be provided in "note" files stored on the file system in
parallel to the files being validated. For every file to check, the name of
the matching "note" file is obtained by suffixing this extension to the
name of the file it matches. The note file should contain the checksum of
the unsuffixed file as a string. The hash string should be the only thing
in the file. It doesn't matter if the checksum string ends with an EOL or
not. This generally should start with a "." and by default will be ".sha256".}
}
\value{
A boolean vector indicating if files match their
provided sha256 checksum hashes.
}
\description{
Validates files by calculating their sha256 checksums and comparing
them to the expected hash. Returns a named boolean vector indicating matching
or mismatching files, by path. \code{error} can be set to return \code{FALSE} or \code{NA}
for problem files instead of throwing an error. File names can be any mix of
absolute and relative paths, where relative is to the current working directory.
}
\details{
The expected \code{checksums} hash strings for files can be provided as a list or vector and can be
named. The files specified via \code{files} will be validated using
these checksums. If named, all checksums must be named for the path to the
file they validate. They are treated like a
"dictionary" from which the expected checksum of a file can be looked up, by path. If
unnamed, then checksums must be in the same order and have the same length
as the provided \code{files} vector.

If \code{checksums} are not specified, then for each file in \code{files}, a
"note" file containing the string checksum as its only content (EOL
optional) will be looked for. They are expected to be named the same as the
\code{files}, but with the addition of the extension \code{ext} (by default ".sha256").
It is an error if an expected sha256 note file is not found, but this behavior
can be configured by setting \code{error}.
}
